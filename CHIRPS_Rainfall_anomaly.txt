
var geometry = 
    ee.Geometry.Polygon(
        [[[85.65552187885164, 27.403883170245003],
          [85.65552187885164, 20.789932616949674],
          [90.57739687885164, 20.789932616949674],
          [90.57739687885164, 27.403883170245003]]])
          
var LGP = ee.FeatureCollection("users/maitiarabindageo454/Wb_District_new");
// //-------------------------------------------------CHIPS---------------------------------

var clip =  function(image) {
  return image.clip(LGP)}

//------Call CHIRPS data sets for 2018------------------
var dataset = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY')
                  .filter(ee.Filter.date('2018-09-20', '2018-10-10'))
                  .filterBounds(geometry)
                  .map(function (img){return img.clip(geometry)});
print(dataset);
var precipitation = dataset.select('precipitation')
                        .reduce(ee.Reducer.mean());

print(precipitation, 'ppt 20-09-2018;10-10-2018');
var precipitationVis = {
  min: 1.0,
  max: 17.0,
  palette: ['001137', '0aab1e', 'e7eb05', 'ff4a2d', 'e90000'],
};
//Map.setCenter(88.5, 27.5, 5);
//Map.addLayer(precipitation, precipitationVis, 'Precipitation');

//call the data for long term
// var chirpsData = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY')
//                     .filterDate('1987-09-20', '2017-10-10')
//                     .filterBounds(India)
//                     .map(function(img){return img.clip(India)});

// //Select the precipitation layer and compute mean over 30 years
// var precip = chirpsData.select('precipitation')
//                 .reduce(ee.Reducer.mean());
// print(precip, 'long term mean');
var startYear = 1988;
var endYear = 2017;
var startWaterMonth = 9;
var startWaterDay = 20;
var endWaterMonth = 10;
var endWaterDay = 20;

// Create a list of years by generating a sequence from start and end years 
var years = ee.List.sequence(startYear, endYear);
var chirps = ee.ImageCollection('UCSB-CHG/CHIRPS/DAILY')
                .filterBounds(geometry)
                .map(function(img){return img.clip(geometry)});
// Generate annual summed image mosaics 
var annualPrecip = ee.ImageCollection.fromImages(
  years.map(function (year) {
    var startDate = ee.Date.fromYMD(year, startWaterMonth, startWaterDay);
    var endDate = ee.Date.fromYMD(ee.Number(year).add(1), endWaterMonth, endWaterDay);
    var annual = chirps
      .filterDate('1988-09-20', '2017-10-10')
      .mean();
    return annual
      .set('year', year)
      .set('system:time_start', ee.Date.fromYMD(year, 9, 20).format("YYYY_MM_dd"));
}));

print(annualPrecip);
//Map.addLayer(annualPrecip.first());

//Now compute the mean
var meanPrecip = annualPrecip.reduce(ee.Reducer.mean()); 
print(meanPrecip, 'meanPrecip');

//Compute anomaly
var anomaly = precipitation.subtract(meanPrecip).clip(LGP);
print(anomaly,'anomaly');

var viz = {min: -4, max: 4, palette:['#ff0606','#ff5b0e','#ffeb0c','#53ff08','#04ffa9','#0c5dff','#ffffff']};

//Map add layer
Map.addLayer(anomaly, viz,'Anomaly_Chirps');
Map.setCenter(87.838, 23.846, 6.5)

//---- add polygon--------------------------------------------------------------
//Create an empty image into which to paint the features, cast to byte.
var empty = ee.Image().byte();

// Paint all the polygon edges with the same number and width, display.
var outline = empty.paint({
  featureCollection: LGP,
  color: 1,
  width: 1
});

Map.addLayer(outline, {}, 'outline')


//-------------------Add legend-----------------------------------------------------
// set position of panel
var legend = ui.Panel({
style: {
position: 'bottom-left',
padding: '8px 15px'
}
});
 
// Create legend title
var legendTitle = ui.Label({
value: 'Rainfall (mm)',
style: {
fontWeight: 'bold',
fontSize: '18px',
margin: '0 0 4px 0',
padding: '0'
}
});
 
// Add the title to the panel
legend.add(legendTitle);
 
// create the legend image
var lon = ee.Image.pixelLonLat().select('latitude');
var gradient = lon.multiply((viz.max-viz.min)/100.0).add(viz.min);
var legendImage = gradient.visualize(viz);
 
// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label(viz['max'])
],
});
 
legend.add(panel);
 
// create thumbnail from the image
var thumbnail = ui.Thumbnail({
image: legendImage,
params: {bbox:'0,0,10,100', dimensions:'10x200'},
style: {padding: '1px', position: 'bottom-center'}
});
 
// add the thumbnail to the legend
legend.add(thumbnail);
 
// create text on top of legend
var panel = ui.Panel({
widgets: [
ui.Label(viz['min'])
],
});
 
legend.add(panel);
 
Map.add(legend);

Export.image.toDrive({
image:anomaly ,
description: 'Chips_RF_Anomaly_Sept_1998_2018',
scale: 4625,
fileFormat: 'GeoTIFF',
region: geometry,
maxPixels: 3465355096,
// formatOptions: {
//   cloudOptimized: true
// }
});
